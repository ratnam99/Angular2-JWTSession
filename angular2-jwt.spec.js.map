{"version":3,"file":"angular2-jwt.spec.js","sourceRoot":"","sources":["angular2-jwt.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import \"core-js\";\nimport {AuthConfig, AuthHttp, tokenNotExpired, JwtHelper} from \"./angular2-jwt\";\nimport {Observable} from \"rxjs\";\nimport {encodeTestToken} from \"./angular2-jwt-test-helpers\";\nimport {Request} from '@angular/http';\n\n\n\nconst expiredToken=encodeTestToken({\n    \"exp\": 0\n});\nconst validToken=encodeTestToken({\n    \"exp\": 9999999999\n});\nconst noExpiryToken=encodeTestToken({\n    \"sub\": \"1234567890\",\n    \"name\": \"John Doe\",\n    \"admin\": true\n});\n\ndescribe('AuthConfig', ()=> {\n    'use strict';\n\n    it('should have default values', ()=> {\n        const config = new AuthConfig().getConfig();\n        expect(config).toBeDefined();\n        expect(config.headerName).toBe(\"Authorization\");\n        expect(config.headerPrefix).toBe(\"Bearer \");\n        expect(config.tokenName).toBe(\"token\");\n        expect(config.noJwtError).toBe(false);\n        expect(config.noTokenScheme).toBe(false);\n        expect(config.globalHeaders).toEqual([]);\n        expect(config.tokenGetter).toBeDefined();\n        const token = \"Token\";\n        localStorage.setItem(config.tokenName, token);\n        expect(config.tokenGetter()).toBe(token);\n    });\n\n    it('should have default values', ()=> {\n        const configExpected = {\n            headerName: \"Foo\",\n            headerPrefix: \"Bar\",\n            tokenName: \"token\",\n            tokenGetter: ()=>\"this is a token\",\n            noJwtError: true,\n            globalHeaders: [{\"header\": \"value\"}, {\"header2\": \"value2\"}],\n            noTokenScheme: true\n        };\n        const config = new AuthConfig(configExpected).getConfig();\n        expect(config).toBeDefined();\n        expect(config.headerName).toBe(configExpected.headerName);\n        expect(config.headerPrefix).toBe(configExpected.headerPrefix + \" \");\n        expect(config.tokenName).toBe(configExpected.tokenName);\n        expect(config.noJwtError).toBe(configExpected.noJwtError);\n        expect(config.noTokenScheme).toBe(configExpected.noTokenScheme);\n        expect(config.globalHeaders).toEqual(configExpected.globalHeaders);\n        expect(config.tokenGetter).toBeDefined();\n        expect(config.tokenGetter()).toBe(\"this is a token\");\n    });\n    \n    it('should use custom token name in default tokenGetter', ()=> {\n      const configExpected = { tokenName: 'Token' };\n      const token = 'token';\n      const config = new AuthConfig(configExpected).getConfig();\n      localStorage.setItem(configExpected.tokenName, token);\n      expect(config).toBeDefined();\n      expect(config.tokenName).toBe(configExpected.tokenName);\n      expect(config.tokenGetter()).toBe(token);\n    });\n\n});\n\ndescribe('JwtHelper', ()=> {\n    'use strict';\n    let jwtHelper:JwtHelper;\n    beforeEach(()=>{\n        jwtHelper=new JwtHelper();\n    });\n    describe('urlBase64Decode',()=>{\n        it('should successfully decode payloads with funny symbols (A Euro symbol in this case) simplified',()=>{\n            const expected=\"€\";\n            const payload=\"4oKs\"\n            const actual:any=jwtHelper.urlBase64Decode(payload);\n            expect(actual).toBe(expected);\n        });\n    });\n    describe('decodeToken',()=>{\n        it('should handle a valid token', ()=> {\n            const payload = {\n                exp: 0\n            };\n            const token = encodeTestToken(payload);\n            const actual = jwtHelper.decodeToken(token);\n            expect(actual).toEqual(payload);\n        });\n    });\n    describe('getTokenExpirationDate',()=>{\n\n    });\n    describe('isTokenExpired',()=>{\n        it('should return false when the token is not expired', ()=> {\n            const actual:boolean=jwtHelper.isTokenExpired(validToken);\n            expect(actual).toBe(false);\n        });\n        it('should return true when the token is expired', ()=> {\n            const actual:boolean=jwtHelper.isTokenExpired(expiredToken);\n            expect(actual).toBe(true);\n        });\n        it('should return false when the token doesn\\'t have an expiry date', ()=> {\n            const actual:boolean=jwtHelper.isTokenExpired(noExpiryToken);\n            expect(actual).toBe(false);\n        });\n        // it('should return false when the token is expired, but within the grace period', ()=> {\n        //     console.log(\"test start\");\n        //     // return a date that has expired 5 seconds ago\n        //     jwtHelper.getTokenExpirationDate=(token:string)=>{\n        //         const date=new Date(new Date().valueOf()-5000);\n        //         console.log(\"token date\",date);\n        //         console.log(\"actual date\",new Date());\n        //         return date;\n        //     };\n        //     //token doesn't matter because we mocked getTokenExpirationDate\n        //     const tokenExpired:boolean=jwtHelper.isTokenExpired(\"\");\n        //     expect(tokenExpired).toBe(true,\"token should be expired\");\n        //     const tokenExpired:boolean=jwtHelper.isTokenExpired(\"\",6);\n        //     expect(tokenExpired).toBe(false,\"token should be within the grace period\");\n        //     console.log(\"test end\");\n        // });\n        // it('should return true when the token is expired and outside the grace period', ()=> {\n        //     // return a date that has expired 5 seconds ago\n        //     jwtHelper.getTokenExpirationDate=(token:string)=>new Date(new Date().valueOf()-5000);\n        //     //token doesn't matter because we mocked getTokenExpirationDate\n        //     const tokenExpired:boolean=jwtHelper.isTokenExpired(\"\");\n        //     expect(tokenExpired).toBe(false,\"token should be expired\");\n        //     const tokenExpired:boolean=jwtHelper.isTokenExpired(\"\",3);\n        //     expect(tokenExpired).toBe(true,\"token should not be within the grace period\");\n        // });\n\n    });\n\n\n});\n\ndescribe('tokenNotExpired', ()=> {\n    'use strict';\n    it('should use the passed token when not expired', ()=> {\n        const actual:boolean=tokenNotExpired(null,validToken);\n        expect(actual).toBe(true);\n    });\n    it('should use the passed token when expired', ()=> {\n        const actual:boolean=tokenNotExpired(null,expiredToken);\n        expect(actual).toBe(false);\n    });\n    it('should use the passed tokenName when not expired', ()=> {\n        localStorage.setItem(\"Valid\", validToken);\n        const actual:boolean=tokenNotExpired(\"Valid\");\n        expect(actual).toBe(true);\n    });\n    it('should use the passed tokenName when expired', ()=> {\n        localStorage.setItem(\"Expired\", expiredToken);\n        const actual:boolean=tokenNotExpired(\"Expired\");\n        expect(actual).toBe(false);\n    });\n    it('should use the defaults when not expired', ()=> {\n        localStorage.setItem(\"token\", validToken);\n        const actual:boolean=tokenNotExpired();\n        expect(actual).toBe(true);\n    });\n    it('should use the defaults when expired', ()=> {\n        localStorage.setItem(\"token\", expiredToken);\n        const actual:boolean=tokenNotExpired();\n        expect(actual).toBe(false);\n    });\n\n});\n\ndescribe(\"AuthHttp\", () => {\n    describe(\"request\", () => {\n        it(\"handles tokenGetters returning string\", () => {\n            let authHttp: AuthHttp = new AuthHttp(new AuthConfig({\n                tokenGetter: () => validToken\n            }), null);\n\n            spyOn(authHttp, \"requestWithToken\").and.stub();\n\n            authHttp.request(null).subscribe();\n\n            expect(authHttp[\"requestWithToken\"]).toHaveBeenCalledWith(null, validToken);\n        });\n\n        it(\"handles tokenGetters returning Promise\\<string\\>\", (done: Function) => {\n            let authHttp: AuthHttp = new AuthHttp(new AuthConfig({\n                tokenGetter: () => Promise.resolve(validToken)\n            }), null);\n\n            spyOn(authHttp, \"requestWithToken\").and.returnValue(Observable.of(\"\"));\n\n            authHttp.request(null).subscribe(() => {\n                expect(authHttp[\"requestWithToken\"]).toHaveBeenCalledWith(null, validToken);\n                done();\n            });\n        });\n\n        it('loads the token on each http subscription', () => {\n            const HEADER_NAME = \"JWT\";\n            let firstToken = encodeTestToken({ \"sub\": 123, \"name\": \"first token\"});\n            let secondToken = encodeTestToken({ \"sub\": 345, \"name\": \"second token\"});\n            let currentToken = firstToken;\n\n            let usedTokens: string[] = [];\n\n            let httpSpy = jasmine.createSpyObj('http', [ 'request' ]);\n            httpSpy.request.and.callFake((req: Request) => {\n                usedTokens.push(req.headers.get(HEADER_NAME).trim());\n                return Observable.of(null);\n            });\n\n            let authHttp = new AuthHttp(new AuthConfig({\n                headerName: HEADER_NAME,\n                headerPrefix: \" \",\n                tokenGetter: () => currentToken\n            }), httpSpy);\n\n            let observer = authHttp.request(new Request({url: 'http://test.local'}));\n            observer.subscribe(() => {});\n            currentToken = secondToken;\n            observer.subscribe(() => {});\n\n            expect(httpSpy[\"request\"]).toHaveBeenCalledTimes(2);\n            expect(usedTokens).toEqual([firstToken, secondToken]);\n        });\n    });\n});\n"]}